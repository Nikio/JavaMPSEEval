// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messagedata.proto

#ifndef PROTOBUF_messagedata_2eproto__INCLUDED
#define PROTOBUF_messagedata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace storm {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_messagedata_2eproto();
void protobuf_AssignDesc_messagedata_2eproto();
void protobuf_ShutdownFile_messagedata_2eproto();

class MessageData;

// ===================================================================

class MessageData : public ::google::protobuf::Message {
 public:
  MessageData();
  virtual ~MessageData();

  MessageData(const MessageData& from);

  inline MessageData& operator=(const MessageData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageData& default_instance();

  void Swap(MessageData* other);

  // implements Message ----------------------------------------------

  inline MessageData* New() const { return New(NULL); }

  MessageData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageData& from);
  void MergeFrom(const MessageData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MessageData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string Command = 1;
  bool has_command() const;
  void clear_command();
  static const int kCommandFieldNumber = 1;
  const ::std::string& command() const;
  void set_command(const ::std::string& value);
  void set_command(const char* value);
  void set_command(const char* value, size_t size);
  ::std::string* mutable_command();
  ::std::string* release_command();
  void set_allocated_command(::std::string* command);

  // repeated string CommandArguments = 2;
  int commandarguments_size() const;
  void clear_commandarguments();
  static const int kCommandArgumentsFieldNumber = 2;
  const ::std::string& commandarguments(int index) const;
  ::std::string* mutable_commandarguments(int index);
  void set_commandarguments(int index, const ::std::string& value);
  void set_commandarguments(int index, const char* value);
  void set_commandarguments(int index, const char* value, size_t size);
  ::std::string* add_commandarguments();
  void add_commandarguments(const ::std::string& value);
  void add_commandarguments(const char* value);
  void add_commandarguments(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& commandarguments() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_commandarguments();

  // repeated string StormArguments = 3;
  int stormarguments_size() const;
  void clear_stormarguments();
  static const int kStormArgumentsFieldNumber = 3;
  const ::std::string& stormarguments(int index) const;
  ::std::string* mutable_stormarguments(int index);
  void set_stormarguments(int index, const ::std::string& value);
  void set_stormarguments(int index, const char* value);
  void set_stormarguments(int index, const char* value, size_t size);
  ::std::string* add_stormarguments();
  void add_stormarguments(const ::std::string& value);
  void add_stormarguments(const char* value);
  void add_stormarguments(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& stormarguments() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_stormarguments();

  // optional bytes Payload = 4;
  bool has_payload() const;
  void clear_payload();
  static const int kPayloadFieldNumber = 4;
  const ::std::string& payload() const;
  void set_payload(const ::std::string& value);
  void set_payload(const char* value);
  void set_payload(const void* value, size_t size);
  ::std::string* mutable_payload();
  ::std::string* release_payload();
  void set_allocated_payload(::std::string* payload);

  // @@protoc_insertion_point(class_scope:storm.MessageData)
 private:
  inline void set_has_command();
  inline void clear_has_command();
  inline void set_has_payload();
  inline void clear_has_payload();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr command_;
  ::google::protobuf::RepeatedPtrField< ::std::string> commandarguments_;
  ::google::protobuf::RepeatedPtrField< ::std::string> stormarguments_;
  ::google::protobuf::internal::ArenaStringPtr payload_;
  friend void  protobuf_AddDesc_messagedata_2eproto();
  friend void protobuf_AssignDesc_messagedata_2eproto();
  friend void protobuf_ShutdownFile_messagedata_2eproto();

  void InitAsDefaultInstance();
  static MessageData* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageData

// required string Command = 1;
inline bool MessageData::has_command() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageData::set_has_command() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageData::clear_has_command() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageData::clear_command() {
  command_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_command();
}
inline const ::std::string& MessageData::command() const {
  // @@protoc_insertion_point(field_get:storm.MessageData.Command)
  return command_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageData::set_command(const ::std::string& value) {
  set_has_command();
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:storm.MessageData.Command)
}
inline void MessageData::set_command(const char* value) {
  set_has_command();
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:storm.MessageData.Command)
}
inline void MessageData::set_command(const char* value, size_t size) {
  set_has_command();
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:storm.MessageData.Command)
}
inline ::std::string* MessageData::mutable_command() {
  set_has_command();
  // @@protoc_insertion_point(field_mutable:storm.MessageData.Command)
  return command_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageData::release_command() {
  clear_has_command();
  return command_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageData::set_allocated_command(::std::string* command) {
  if (command != NULL) {
    set_has_command();
  } else {
    clear_has_command();
  }
  command_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), command);
  // @@protoc_insertion_point(field_set_allocated:storm.MessageData.Command)
}

// repeated string CommandArguments = 2;
inline int MessageData::commandarguments_size() const {
  return commandarguments_.size();
}
inline void MessageData::clear_commandarguments() {
  commandarguments_.Clear();
}
inline const ::std::string& MessageData::commandarguments(int index) const {
  // @@protoc_insertion_point(field_get:storm.MessageData.CommandArguments)
  return commandarguments_.Get(index);
}
inline ::std::string* MessageData::mutable_commandarguments(int index) {
  // @@protoc_insertion_point(field_mutable:storm.MessageData.CommandArguments)
  return commandarguments_.Mutable(index);
}
inline void MessageData::set_commandarguments(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:storm.MessageData.CommandArguments)
  commandarguments_.Mutable(index)->assign(value);
}
inline void MessageData::set_commandarguments(int index, const char* value) {
  commandarguments_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:storm.MessageData.CommandArguments)
}
inline void MessageData::set_commandarguments(int index, const char* value, size_t size) {
  commandarguments_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:storm.MessageData.CommandArguments)
}
inline ::std::string* MessageData::add_commandarguments() {
  return commandarguments_.Add();
}
inline void MessageData::add_commandarguments(const ::std::string& value) {
  commandarguments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:storm.MessageData.CommandArguments)
}
inline void MessageData::add_commandarguments(const char* value) {
  commandarguments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:storm.MessageData.CommandArguments)
}
inline void MessageData::add_commandarguments(const char* value, size_t size) {
  commandarguments_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:storm.MessageData.CommandArguments)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MessageData::commandarguments() const {
  // @@protoc_insertion_point(field_list:storm.MessageData.CommandArguments)
  return commandarguments_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MessageData::mutable_commandarguments() {
  // @@protoc_insertion_point(field_mutable_list:storm.MessageData.CommandArguments)
  return &commandarguments_;
}

// repeated string StormArguments = 3;
inline int MessageData::stormarguments_size() const {
  return stormarguments_.size();
}
inline void MessageData::clear_stormarguments() {
  stormarguments_.Clear();
}
inline const ::std::string& MessageData::stormarguments(int index) const {
  // @@protoc_insertion_point(field_get:storm.MessageData.StormArguments)
  return stormarguments_.Get(index);
}
inline ::std::string* MessageData::mutable_stormarguments(int index) {
  // @@protoc_insertion_point(field_mutable:storm.MessageData.StormArguments)
  return stormarguments_.Mutable(index);
}
inline void MessageData::set_stormarguments(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:storm.MessageData.StormArguments)
  stormarguments_.Mutable(index)->assign(value);
}
inline void MessageData::set_stormarguments(int index, const char* value) {
  stormarguments_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:storm.MessageData.StormArguments)
}
inline void MessageData::set_stormarguments(int index, const char* value, size_t size) {
  stormarguments_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:storm.MessageData.StormArguments)
}
inline ::std::string* MessageData::add_stormarguments() {
  return stormarguments_.Add();
}
inline void MessageData::add_stormarguments(const ::std::string& value) {
  stormarguments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:storm.MessageData.StormArguments)
}
inline void MessageData::add_stormarguments(const char* value) {
  stormarguments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:storm.MessageData.StormArguments)
}
inline void MessageData::add_stormarguments(const char* value, size_t size) {
  stormarguments_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:storm.MessageData.StormArguments)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MessageData::stormarguments() const {
  // @@protoc_insertion_point(field_list:storm.MessageData.StormArguments)
  return stormarguments_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MessageData::mutable_stormarguments() {
  // @@protoc_insertion_point(field_mutable_list:storm.MessageData.StormArguments)
  return &stormarguments_;
}

// optional bytes Payload = 4;
inline bool MessageData::has_payload() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MessageData::set_has_payload() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MessageData::clear_has_payload() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MessageData::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payload();
}
inline const ::std::string& MessageData::payload() const {
  // @@protoc_insertion_point(field_get:storm.MessageData.Payload)
  return payload_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageData::set_payload(const ::std::string& value) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:storm.MessageData.Payload)
}
inline void MessageData::set_payload(const char* value) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:storm.MessageData.Payload)
}
inline void MessageData::set_payload(const void* value, size_t size) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:storm.MessageData.Payload)
}
inline ::std::string* MessageData::mutable_payload() {
  set_has_payload();
  // @@protoc_insertion_point(field_mutable:storm.MessageData.Payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MessageData::release_payload() {
  clear_has_payload();
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MessageData::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    set_has_payload();
  } else {
    clear_has_payload();
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:storm.MessageData.Payload)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace storm

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_messagedata_2eproto__INCLUDED

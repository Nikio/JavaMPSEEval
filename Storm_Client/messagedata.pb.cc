// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messagedata.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messagedata.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace storm {

namespace {

const ::google::protobuf::Descriptor* MessageData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_messagedata_2eproto() {
  protobuf_AddDesc_messagedata_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messagedata.proto");
  GOOGLE_CHECK(file != NULL);
  MessageData_descriptor_ = file->message_type(0);
  static const int MessageData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageData, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageData, commandarguments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageData, stormarguments_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageData, payload_),
  };
  MessageData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MessageData_descriptor_,
      MessageData::default_instance_,
      MessageData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageData, _has_bits_[0]),
      -1,
      -1,
      sizeof(MessageData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageData, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messagedata_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MessageData_descriptor_, &MessageData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messagedata_2eproto() {
  delete MessageData::default_instance_;
  delete MessageData_reflection_;
}

void protobuf_AddDesc_messagedata_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021messagedata.proto\022\005storm\"a\n\013MessageDat"
    "a\022\017\n\007Command\030\001 \002(\t\022\030\n\020CommandArguments\030\002"
    " \003(\t\022\026\n\016StormArguments\030\003 \003(\t\022\017\n\007Payload\030"
    "\004 \001(\014", 125);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messagedata.proto", &protobuf_RegisterTypes);
  MessageData::default_instance_ = new MessageData();
  MessageData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messagedata_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messagedata_2eproto {
  StaticDescriptorInitializer_messagedata_2eproto() {
    protobuf_AddDesc_messagedata_2eproto();
  }
} static_descriptor_initializer_messagedata_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MessageData::kCommandFieldNumber;
const int MessageData::kCommandArgumentsFieldNumber;
const int MessageData::kStormArgumentsFieldNumber;
const int MessageData::kPayloadFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MessageData::MessageData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:storm.MessageData)
}

void MessageData::InitAsDefaultInstance() {
}

MessageData::MessageData(const MessageData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:storm.MessageData)
}

void MessageData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  command_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageData::~MessageData() {
  // @@protoc_insertion_point(destructor:storm.MessageData)
  SharedDtor();
}

void MessageData::SharedDtor() {
  command_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MessageData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageData_descriptor_;
}

const MessageData& MessageData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messagedata_2eproto();
  return *default_instance_;
}

MessageData* MessageData::default_instance_ = NULL;

MessageData* MessageData::New(::google::protobuf::Arena* arena) const {
  MessageData* n = new MessageData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MessageData::Clear() {
  if (_has_bits_[0 / 32] & 9u) {
    if (has_command()) {
      command_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_payload()) {
      payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  commandarguments_.Clear();
  stormarguments_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MessageData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:storm.MessageData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string Command = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->command().data(), this->command().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "storm.MessageData.Command");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_CommandArguments;
        break;
      }

      // repeated string CommandArguments = 2;
      case 2: {
        if (tag == 18) {
         parse_CommandArguments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_commandarguments()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->commandarguments(this->commandarguments_size() - 1).data(),
            this->commandarguments(this->commandarguments_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "storm.MessageData.CommandArguments");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_CommandArguments;
        if (input->ExpectTag(26)) goto parse_StormArguments;
        break;
      }

      // repeated string StormArguments = 3;
      case 3: {
        if (tag == 26) {
         parse_StormArguments:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_stormarguments()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->stormarguments(this->stormarguments_size() - 1).data(),
            this->stormarguments(this->stormarguments_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "storm.MessageData.StormArguments");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_StormArguments;
        if (input->ExpectTag(34)) goto parse_Payload;
        break;
      }

      // optional bytes Payload = 4;
      case 4: {
        if (tag == 34) {
         parse_Payload:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:storm.MessageData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:storm.MessageData)
  return false;
#undef DO_
}

void MessageData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:storm.MessageData)
  // required string Command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "storm.MessageData.Command");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->command(), output);
  }

  // repeated string CommandArguments = 2;
  for (int i = 0; i < this->commandarguments_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->commandarguments(i).data(), this->commandarguments(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "storm.MessageData.CommandArguments");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->commandarguments(i), output);
  }

  // repeated string StormArguments = 3;
  for (int i = 0; i < this->stormarguments_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stormarguments(i).data(), this->stormarguments(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "storm.MessageData.StormArguments");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->stormarguments(i), output);
  }

  // optional bytes Payload = 4;
  if (has_payload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->payload(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:storm.MessageData)
}

::google::protobuf::uint8* MessageData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:storm.MessageData)
  // required string Command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "storm.MessageData.Command");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->command(), target);
  }

  // repeated string CommandArguments = 2;
  for (int i = 0; i < this->commandarguments_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->commandarguments(i).data(), this->commandarguments(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "storm.MessageData.CommandArguments");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->commandarguments(i), target);
  }

  // repeated string StormArguments = 3;
  for (int i = 0; i < this->stormarguments_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->stormarguments(i).data(), this->stormarguments(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "storm.MessageData.StormArguments");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->stormarguments(i), target);
  }

  // optional bytes Payload = 4;
  if (has_payload()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->payload(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:storm.MessageData)
  return target;
}

int MessageData::ByteSize() const {
  int total_size = 0;

  // required string Command = 1;
  if (has_command()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->command());
  }
  // optional bytes Payload = 4;
  if (has_payload()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->payload());
  }

  // repeated string CommandArguments = 2;
  total_size += 1 * this->commandarguments_size();
  for (int i = 0; i < this->commandarguments_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->commandarguments(i));
  }

  // repeated string StormArguments = 3;
  total_size += 1 * this->stormarguments_size();
  for (int i = 0; i < this->stormarguments_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->stormarguments(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageData::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MessageData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MessageData>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageData::MergeFrom(const MessageData& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  commandarguments_.MergeFrom(from.commandarguments_);
  stormarguments_.MergeFrom(from.stormarguments_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_has_command();
      command_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.command_);
    }
    if (from.has_payload()) {
      set_has_payload();
      payload_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MessageData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageData::CopyFrom(const MessageData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MessageData::Swap(MessageData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MessageData::InternalSwap(MessageData* other) {
  command_.Swap(&other->command_);
  commandarguments_.UnsafeArenaSwap(&other->commandarguments_);
  stormarguments_.UnsafeArenaSwap(&other->stormarguments_);
  payload_.Swap(&other->payload_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MessageData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageData_descriptor_;
  metadata.reflection = MessageData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MessageData

// required string Command = 1;
bool MessageData::has_command() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MessageData::set_has_command() {
  _has_bits_[0] |= 0x00000001u;
}
void MessageData::clear_has_command() {
  _has_bits_[0] &= ~0x00000001u;
}
void MessageData::clear_command() {
  command_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_command();
}
 const ::std::string& MessageData::command() const {
  // @@protoc_insertion_point(field_get:storm.MessageData.Command)
  return command_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageData::set_command(const ::std::string& value) {
  set_has_command();
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:storm.MessageData.Command)
}
 void MessageData::set_command(const char* value) {
  set_has_command();
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:storm.MessageData.Command)
}
 void MessageData::set_command(const char* value, size_t size) {
  set_has_command();
  command_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:storm.MessageData.Command)
}
 ::std::string* MessageData::mutable_command() {
  set_has_command();
  // @@protoc_insertion_point(field_mutable:storm.MessageData.Command)
  return command_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MessageData::release_command() {
  clear_has_command();
  return command_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageData::set_allocated_command(::std::string* command) {
  if (command != NULL) {
    set_has_command();
  } else {
    clear_has_command();
  }
  command_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), command);
  // @@protoc_insertion_point(field_set_allocated:storm.MessageData.Command)
}

// repeated string CommandArguments = 2;
int MessageData::commandarguments_size() const {
  return commandarguments_.size();
}
void MessageData::clear_commandarguments() {
  commandarguments_.Clear();
}
 const ::std::string& MessageData::commandarguments(int index) const {
  // @@protoc_insertion_point(field_get:storm.MessageData.CommandArguments)
  return commandarguments_.Get(index);
}
 ::std::string* MessageData::mutable_commandarguments(int index) {
  // @@protoc_insertion_point(field_mutable:storm.MessageData.CommandArguments)
  return commandarguments_.Mutable(index);
}
 void MessageData::set_commandarguments(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:storm.MessageData.CommandArguments)
  commandarguments_.Mutable(index)->assign(value);
}
 void MessageData::set_commandarguments(int index, const char* value) {
  commandarguments_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:storm.MessageData.CommandArguments)
}
 void MessageData::set_commandarguments(int index, const char* value, size_t size) {
  commandarguments_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:storm.MessageData.CommandArguments)
}
 ::std::string* MessageData::add_commandarguments() {
  return commandarguments_.Add();
}
 void MessageData::add_commandarguments(const ::std::string& value) {
  commandarguments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:storm.MessageData.CommandArguments)
}
 void MessageData::add_commandarguments(const char* value) {
  commandarguments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:storm.MessageData.CommandArguments)
}
 void MessageData::add_commandarguments(const char* value, size_t size) {
  commandarguments_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:storm.MessageData.CommandArguments)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
MessageData::commandarguments() const {
  // @@protoc_insertion_point(field_list:storm.MessageData.CommandArguments)
  return commandarguments_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
MessageData::mutable_commandarguments() {
  // @@protoc_insertion_point(field_mutable_list:storm.MessageData.CommandArguments)
  return &commandarguments_;
}

// repeated string StormArguments = 3;
int MessageData::stormarguments_size() const {
  return stormarguments_.size();
}
void MessageData::clear_stormarguments() {
  stormarguments_.Clear();
}
 const ::std::string& MessageData::stormarguments(int index) const {
  // @@protoc_insertion_point(field_get:storm.MessageData.StormArguments)
  return stormarguments_.Get(index);
}
 ::std::string* MessageData::mutable_stormarguments(int index) {
  // @@protoc_insertion_point(field_mutable:storm.MessageData.StormArguments)
  return stormarguments_.Mutable(index);
}
 void MessageData::set_stormarguments(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:storm.MessageData.StormArguments)
  stormarguments_.Mutable(index)->assign(value);
}
 void MessageData::set_stormarguments(int index, const char* value) {
  stormarguments_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:storm.MessageData.StormArguments)
}
 void MessageData::set_stormarguments(int index, const char* value, size_t size) {
  stormarguments_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:storm.MessageData.StormArguments)
}
 ::std::string* MessageData::add_stormarguments() {
  return stormarguments_.Add();
}
 void MessageData::add_stormarguments(const ::std::string& value) {
  stormarguments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:storm.MessageData.StormArguments)
}
 void MessageData::add_stormarguments(const char* value) {
  stormarguments_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:storm.MessageData.StormArguments)
}
 void MessageData::add_stormarguments(const char* value, size_t size) {
  stormarguments_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:storm.MessageData.StormArguments)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
MessageData::stormarguments() const {
  // @@protoc_insertion_point(field_list:storm.MessageData.StormArguments)
  return stormarguments_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
MessageData::mutable_stormarguments() {
  // @@protoc_insertion_point(field_mutable_list:storm.MessageData.StormArguments)
  return &stormarguments_;
}

// optional bytes Payload = 4;
bool MessageData::has_payload() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MessageData::set_has_payload() {
  _has_bits_[0] |= 0x00000008u;
}
void MessageData::clear_has_payload() {
  _has_bits_[0] &= ~0x00000008u;
}
void MessageData::clear_payload() {
  payload_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payload();
}
 const ::std::string& MessageData::payload() const {
  // @@protoc_insertion_point(field_get:storm.MessageData.Payload)
  return payload_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageData::set_payload(const ::std::string& value) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:storm.MessageData.Payload)
}
 void MessageData::set_payload(const char* value) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:storm.MessageData.Payload)
}
 void MessageData::set_payload(const void* value, size_t size) {
  set_has_payload();
  payload_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:storm.MessageData.Payload)
}
 ::std::string* MessageData::mutable_payload() {
  set_has_payload();
  // @@protoc_insertion_point(field_mutable:storm.MessageData.Payload)
  return payload_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MessageData::release_payload() {
  clear_has_payload();
  return payload_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MessageData::set_allocated_payload(::std::string* payload) {
  if (payload != NULL) {
    set_has_payload();
  } else {
    clear_has_payload();
  }
  payload_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload);
  // @@protoc_insertion_point(field_set_allocated:storm.MessageData.Payload)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace storm

// @@protoc_insertion_point(global_scope)
